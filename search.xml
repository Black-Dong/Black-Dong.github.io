<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>剑指Offer-03数组中重复的数字</title>
    <url>/2020/11/19/%E5%89%91%E6%8C%87Offer-03%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<ul>
<li>一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</li>
</ul>
<a id="more"></a>


<h3 id="剑指Offer-03数组中重复的数字"><a href="#剑指Offer-03数组中重复的数字" class="headerlink" title="剑指Offer-03数组中重复的数字"></a>剑指Offer-03数组中重复的数字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3</span><br><span class="line">限制：2 &lt;&#x3D; n &lt;&#x3D; 100000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>思路 1: </p>
<blockquote>
<p>新建一个最大值长度的数组，将值放入值下标对应位置，若在放置过程中出现对应下标已有值，则直接返回。</p>
</blockquote>
<p>思路 2:</p>
<blockquote>
<p>将数组中的值放入一个Map中（当Key）或Set中，使用containsKey或contains判断是否存在，存在则直接返回，不存在放入。<br>具体实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       Set&lt;Integer&gt; tempSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">           <span class="keyword">if</span> (tempSet.contains(num)) &#123;</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           &#125;</span><br><span class="line">           tempSet.add(num);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>剑指Offer</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的this关键字</title>
    <url>/2020/03/07/Java%E4%B8%AD%E7%9A%84this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<ul>
<li>this 关键字</li>
</ul>
<a id="more"></a>

<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><blockquote>
<p>作用：</p>
<blockquote>
<ul>
<li>this 代表了当前对象的引用</li>
<li>this 关键字可以用在实例和构造器中</li>
<li>this 用在方法中，谁调用这个方法，this 就代表谁</li>
<li>this 用在构造器中，代表了构造器正在初始话的那个对象的引用</li>
</ul>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>Java碎片知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类的五大成分</title>
    <url>/2020/03/07/Java%E7%B1%BB%E7%9A%84%E4%BA%94%E5%A4%A7%E6%88%90%E5%88%86/</url>
    <content><![CDATA[<ul>
<li>Java中的类有且只有五大成分</li>
</ul>
<a id="more"></a>

<h3 id="Java中的类"><a href="#Java中的类" class="headerlink" title="Java中的类"></a>Java中的类</h3><h4 id="五大成分"><a href="#五大成分" class="headerlink" title="五大成分"></a>五大成分</h4><blockquote>
<ul>
<li>成员变量（Field：描述类和对象的属性信息）</li>
<li>成员方法（Method：描述类或对象的行为信息）</li>
<li>构造器（Constructor：初始话一个类的对象，并返回引用）</li>
<li>方法块</li>
<li>内部类</li>
</ul>
<blockquote>
<p>以下代码正确么，请说明原因</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ClassDemo &#123;</span><br><span class="line">	System.out.println(&quot;helloWord&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答：错误，应为类中只有五大成分，System.out.println(“”); 属于执行方法，不是五大成分就会报错。</p>
</blockquote>
</blockquote>
<h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><blockquote>
<p>作用：初始话一个类的对象并返回引用。</p>
<p>格式：</p>
<blockquote>
<p>修饰符 类名( 形参… ) {</p>
<p>}</p>
</blockquote>
<p>构造器初始化对象的格式：</p>
<blockquote>
<p>类名 对象名称 = new 构造器;</p>
</blockquote>
<p>注意：</p>
<blockquote>
<p>一个类会默认自带一个无参构造器。</p>
<p>但如果自己写了一个构造器，那么无参构造器就被覆盖了！！！</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>Java碎片知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合MyBatis Generator</title>
    <url>/2020/02/16/SpringBoot%E6%95%B4%E5%90%88mybatis-generator/</url>
    <content><![CDATA[<ul>
<li><p>MyBatis Generator是一款mybaits提供的代码生成器， MyBatis生成器（MyBatis Generator）能对数据库表内省，生成执行的增删改查（CRUD）时所需的MyBatis代码。</p>
</li>
<li><p>SpringBoot与MyBatis Generator整合（with maven）</p>
</li>
</ul>
<a id="more"></a>

<h3 id="MyBatis-Generator官方文档"><a href="#MyBatis-Generator官方文档" class="headerlink" title="MyBatis Generator官方文档"></a><a href="http://mybatis.org/generator/" target="_blank" rel="noopener">MyBatis Generator官方文档</a></h3><blockquote>
<p>建议使用时浏览官方文档</p>
</blockquote>
<h3 id="首先创建一个SpringBoot项目"><a href="#首先创建一个SpringBoot项目" class="headerlink" title="首先创建一个SpringBoot项目"></a>首先创建一个SpringBoot项目</h3><blockquote>
<ul>
<li>略过</li>
</ul>
</blockquote>
<h3 id="引入MyBatis-Generator插件"><a href="#引入MyBatis-Generator插件" class="headerlink" title="引入MyBatis Generator插件"></a>引入MyBatis Generator插件</h3><blockquote>
<ul>
<li>在pom文件中引入插件（版本自己选择）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建generatorConfig.xml（默认位置为 ${basedir}/src/main/resources/generatorConfig.xml ）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id&#x3D;&quot;DB2Tables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;!-- 生成文件取消注释代码 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressDate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;imust_bbs&quot;</span><br><span class="line">                        userId&#x3D;&quot;root&quot;</span><br><span class="line">                        password&#x3D;&quot;root&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaTypeResolver &gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;model所在包路径&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapperXML所在路径&quot;  targetProject&#x3D;&quot;src&#x2F;main&#x2F;resources&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot; targetPackage&#x3D;&quot;mapper所在包路径&quot;  targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table tableName&#x3D;&quot;数据库表名&quot; domainObjectName&#x3D;&quot;Model类名&quot; &gt;&lt;&#x2F;table&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;user&quot; domainObjectName&#x3D;&quot;User&quot; &gt;&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在application.yml中配置mapperXML与mapper的对应关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    # 驼峰命名</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  type-aliases-package: mapper所在包路径</span><br><span class="line">  # mapperXML路径</span><br><span class="line">  mapper-locations: classpath:mapper&#x2F;*.xml</span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -Dmybatis.generator.overwrite&#x3D;true mybatis-generator:generate</span><br></pre></td></tr></table></figure>

</blockquote>
<h3 id="其他更详细内容或其他引入方式请查看MyBatis-Generator官方文档"><a href="#其他更详细内容或其他引入方式请查看MyBatis-Generator官方文档" class="headerlink" title="其他更详细内容或其他引入方式请查看MyBatis Generator官方文档"></a>其他更详细内容或其他引入方式请查看<a href="http://mybatis.org/generator/index.html" target="_blank" rel="noopener">MyBatis Generator官方文档</a></h3>]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>SpringBoot整合插件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Swagger</title>
    <url>/2020/01/08/SpringBoot%E6%95%B4%E5%90%88Swagger/</url>
    <content><![CDATA[<ul>
<li>Swagger是一款可以让你更方便、更流畅、更具格式化的书写API文档的框架。</li>
<li>SpringBoot与Swagger整合。</li>
</ul>
<a id="more"></a>

<h3 id="Swagger官网"><a href="#Swagger官网" class="headerlink" title="Swagger官网"></a><a href="https://swagger.io/" target="_blank" rel="noopener">Swagger官网</a></h3><blockquote>
<p>英语比较好的，可以看看官网。</p>
</blockquote>
<h3 id="首先创建一个SpringBoot的项目"><a href="#首先创建一个SpringBoot的项目" class="headerlink" title="首先创建一个SpringBoot的项目"></a>首先创建一个SpringBoot的项目</h3><blockquote>
<ul>
<li>各种方式创建一个SpringBoot项目，此处不讲。</li>
</ul>
</blockquote>
<h3 id="引入Swagger"><a href="#引入Swagger" class="headerlink" title="引入Swagger"></a>引入Swagger</h3><blockquote>
<ul>
<li><p>在pom文件中引入依赖(版本自己选择)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- swagger --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- swagger-ui 可视化的查看api --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑Swagger的配置类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket api()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Swagger常用注解</p>
<ul>
<li><p>Contoller相关注解</p>
<ul>
<li>@Api</li>
</ul>
<table>
<thead>
<tr>
<th align="center">注解属性</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tags</td>
<td align="center">String[]</td>
<td align="center">控制器标签。</td>
</tr>
<tr>
<td align="center">description</td>
<td align="center">String</td>
<td align="center">控制器描述（该字段被申明为过期）。</td>
</tr>
</tbody></table>
</li>
<li><p>接口相关</p>
<ul>
<li>@ApiOperation</li>
</ul>
<table>
<thead>
<tr>
<th align="center">注解属性</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">接口说明。</td>
</tr>
<tr>
<td align="center">notes</td>
<td align="center">String</td>
<td align="center">接口发布说明。</td>
</tr>
<tr>
<td align="center">tags</td>
<td align="center">Stirng[]</td>
<td align="center">标签。</td>
</tr>
<tr>
<td align="center">response</td>
<td align="center">Class&lt;?&gt;</td>
<td align="center">接口返回类型。</td>
</tr>
<tr>
<td align="center">httpMethod</td>
<td align="center">String</td>
<td align="center">接口请求方式。</td>
</tr>
<tr>
<td align="center">* @ApiIgnore: Swagger 文档不会显示拥有该注解的接口</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">* @ApilmplicitParams: 用于描述接口的非对象参数集</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">* @ApiImplicitParam: 用于描述接口的非对象参数，一般与 @ApiImplicitParams 组合使用</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">注解属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">paramType</td>
<td align="left">查询参数类型，实际上就是参数放在那里。取值：path：以地址的形式提交数据，根据 id 查询用户的接口就是这种形式传参。query：Query string 的方式传参。header：以流的形式提交。form：以 Form 表单的形式提交。</td>
</tr>
<tr>
<td align="center">dataType</td>
<td align="left">参数的数据类型。取值：Long、String</td>
</tr>
<tr>
<td align="center">name</td>
<td align="left">参数名字。</td>
</tr>
<tr>
<td align="center">value</td>
<td align="left">参数意义的描述。</td>
</tr>
<tr>
<td align="center">required</td>
<td align="left">是否必填。取值：true：必填参数。false：非必填参数。</td>
</tr>
</tbody></table>
</li>
<li><p>Model相关接口</p>
<ul>
<li>@ApiModel: 可设置接口相关实体的描述。 </li>
<li>@ApiModelProperty: 可设置实体属性的相关描述。 </li>
</ul>
<table>
<thead>
<tr>
<th>注解属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>字段说明。</td>
</tr>
<tr>
<td>name</td>
<td>String</td>
<td>重写字段名称。</td>
</tr>
<tr>
<td>dataType</td>
<td>Stirng</td>
<td>重写字段类型。</td>
</tr>
<tr>
<td>required</td>
<td>boolean</td>
<td>是否必填。</td>
</tr>
<tr>
<td>example</td>
<td>Stirng</td>
<td>举例说明。</td>
</tr>
<tr>
<td>hidden</td>
<td>boolean</td>
<td>是否在文档中隐藏该字段。</td>
</tr>
<tr>
<td>allowEmptyValue</td>
<td>boolean</td>
<td>是否允许为空。</td>
</tr>
<tr>
<td>allowableValues</td>
<td>String</td>
<td>该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="推荐阅读在-Spring-Boot-项目中使用-Swagger-文档或springboot快速集成swagger"><a href="#推荐阅读在-Spring-Boot-项目中使用-Swagger-文档或springboot快速集成swagger" class="headerlink" title="推荐阅读在 Spring Boot 项目中使用 Swagger 文档或springboot快速集成swagger"></a>推荐阅读<a href="https://www.ibm.com/developerworks/cn/java/j-using-swagger-in-a-spring-boot-project/index.html" target="_blank" rel="noopener">在 Spring Boot 项目中使用 Swagger 文档</a>或<a href="https://juejin.im/post/5cf08d65f265da1bb13f17a6#heading-14" target="_blank" rel="noopener">springboot快速集成swagger</a></h3>]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>SpringBoot整合插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试文档推荐下载</title>
    <url>/2020/01/06/Java%E6%96%87%E6%A1%A3%E6%8E%A8%E8%8D%90%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<ul>
<li>一些可能有用的文档推荐</li>
<li>主要推荐一些 Java 的文档</li>
</ul>
<a id="more"></a>

<h3 id="黑马程序员面试宝典-java-Beta6-0-pdf"><a href="#黑马程序员面试宝典-java-Beta6-0-pdf" class="headerlink" title="黑马程序员面试宝典(java)Beta6.0.pdf"></a><a href="">黑马程序员面试宝典(java)Beta6.0.pdf</a></h3><blockquote>
<p>该文档对 JavaSE、JavaWeb、数据库、框架等进行了基础描述</p>
<p>本人认为该文档适合对某块技术刚达到了解，需要对基础加深印象时阅读。</p>
<p>获取方式: </p>
<blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1EQ2rgrnVhIfjIn8doRUQ8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1EQ2rgrnVhIfjIn8doRUQ8Q</a> </p>
<p>提取码: qe7j</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>文档下载</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(其他)</title>
    <url>/2020/01/05/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(6)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（六），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集” ，需要跟多该主题下内容请到<a href="https://www.nowcoder.com/ta/review-java?query=&asc=true&order=&tagQuery=&page=1" target="_blank" rel="noopener"> Java校招面试题目合集 </a></li>
</ul>
<a id="more"></a>

<h3 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21145&query=&asc=true&order=&page=72" target="_blank" rel="noopener">什么是JDBC？</a></h3><blockquote>
<p>JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节，是一种API。</p>
</blockquote>
<h3 id="解释下驱动-Driver-在JDBC中的角色。"><a href="#解释下驱动-Driver-在JDBC中的角色。" class="headerlink" title="解释下驱动(Driver)在JDBC中的角色。"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=73" target="_blank" rel="noopener">解释下驱动(Driver)在JDBC中的角色。</a></h3><blockquote>
<p>JDBC驱动提供了特定厂商对JDBC API接口类的实现，驱动必须要提供java.sql包下面这些类的实现：Connection, Statement, PreparedStatement,CallableStatement, ResultSet和Driver。 </p>
</blockquote>
<h3 id="Class-forName-方法有什么作用？"><a href="#Class-forName-方法有什么作用？" class="headerlink" title=" Class.forName()方法有什么作用？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=74" target="_blank" rel="noopener"> Class.forName()方法有什么作用？</a></h3><blockquote>
<p>初始化参数指定的类，并且返回此类对应的Class 对象</p>
</blockquote>
<h3 id="PreparedStatement比Statement有什么优势？"><a href="#PreparedStatement比Statement有什么优势？" class="headerlink" title="PreparedStatement比Statement有什么优势？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=75" target="_blank" rel="noopener">PreparedStatement比Statement有什么优势？</a></h3><blockquote>
<p>PreparedStatements是预编译的，因此，性能会更好。同时，不同的查询参数值，PreparedStatement可以重用。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(5)</title>
    <url>/2020/01/05/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(5)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（五），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集”的41-50题。</li>
</ul>
<a id="more"></a>

<h3 id="在Java中，对象什么时候可以被垃圾回收？"><a href="#在Java中，对象什么时候可以被垃圾回收？" class="headerlink" title="在Java中，对象什么时候可以被垃圾回收？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=41" target="_blank" rel="noopener">在Java中，对象什么时候可以被垃圾回收？</a></h3><blockquote>
<p>当对象对当前使用这个对象的应用程序变得不可触及的时候(GC root 不可及) + 下次垃圾回收周期到来时，这个对象就可以被回收了。</p>
</blockquote>
<h3 id="JVM的永久代中会发生垃圾回收么？"><a href="#JVM的永久代中会发生垃圾回收么？" class="headerlink" title="JVM的永久代中会发生垃圾回收么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=42" target="_blank" rel="noopener">JVM的永久代中会发生垃圾回收么？</a></h3><blockquote>
<p>会，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。请参考下Java8：从永久代到元数据区<br>(注：Java8中已经移除了永久代，新加了一个叫做元数据区的native内存区) </p>
</blockquote>
<h3 id="Java中的两种异常类型是什么？他们有什么区别？"><a href="#Java中的两种异常类型是什么？他们有什么区别？" class="headerlink" title="Java中的两种异常类型是什么？他们有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=43" target="_blank" rel="noopener">Java中的两种异常类型是什么？他们有什么区别？</a></h3><blockquote>
<p>Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常。不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。相反，受检查的异常必须要用throws语句在方法或者是构造函数上声明。这里有Java异常处理的一些小建议。 </p>
</blockquote>
<h3 id="Java中Exception和Error有什么区别？"><a href="#Java中Exception和Error有什么区别？" class="headerlink" title="Java中Exception和Error有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=44" target="_blank" rel="noopener">Java中Exception和Error有什么区别？</a></h3><blockquote>
<p>Exception和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。</p>
</blockquote>
<h3 id="throw和throws有什么区别？"><a href="#throw和throws有什么区别？" class="headerlink" title="throw和throws有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=45" target="_blank" rel="noopener">throw和throws有什么区别？</a></h3><blockquote>
<p>1、Throw用于方法内部，Throws用于方法声明上</p>
<p>2、Throw后跟异常对象，Throws后跟异常类型</p>
<p>3、Throw后只能跟一个异常对象，Throws后可以一次声明多种异常类型</p>
</blockquote>
<h3 id="异常处理完成以后，Exception对象会发生什么变化？"><a href="#异常处理完成以后，Exception对象会发生什么变化？" class="headerlink" title="异常处理完成以后，Exception对象会发生什么变化？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=46" target="_blank" rel="noopener">异常处理完成以后，Exception对象会发生什么变化？</a></h3><blockquote>
<p>Exception对象会在下一个垃圾回收过程中被回收掉。</p>
</blockquote>
<h3 id="finally代码块和finalize-方法有什么区别？"><a href="#finally代码块和finalize-方法有什么区别？" class="headerlink" title="finally代码块和finalize()方法有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=47" target="_blank" rel="noopener">finally代码块和finalize()方法有什么区别？</a></h3><blockquote>
<p>无论是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源。finalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的。</p>
</blockquote>
<h3 id="什么是Applet？"><a href="#什么是Applet？" class="headerlink" title="什么是Applet？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=48" target="_blank" rel="noopener">什么是Applet？</a></h3><blockquote>
<p>java applet是能够被包含在HTML页面中并且能被启用了java的客户端浏览器执行的程序。Applet主要用来创建动态交互的web应用程序。(能被浏览器执行的Java网页小程序，随网页被下载到客户端)</p>
</blockquote>
<h3 id="解释一下Applet的生命周期"><a href="#解释一下Applet的生命周期" class="headerlink" title="解释一下Applet的生命周期"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=49" target="_blank" rel="noopener">解释一下Applet的生命周期</a></h3><blockquote>
<p>applet可以经历下面的状态：</p>
<ul>
<li>Init：每次被载入的时候都会被初始化。</li>
<li>Start：开始执行applet。</li>
<li>Stop：结束执行applet。</li>
<li>Destroy：卸载applet之前，做最后的清理工作。 </li>
</ul>
</blockquote>
<h3 id="当applet被载入的时候会发生什么？"><a href="#当applet被载入的时候会发生什么？" class="headerlink" title="当applet被载入的时候会发生什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=50" target="_blank" rel="noopener">当applet被载入的时候会发生什么？</a></h3><blockquote>
<p>首先，创建applet控制类的实例，然后初始化applet，最后开始运行。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(4)</title>
    <url>/2020/01/04/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(4)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（四），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集”的31-40题。</li>
</ul>
<a id="more"></a>

<h3 id="如何权衡是使用无序的数组还是有序的数组？"><a href="#如何权衡是使用无序的数组还是有序的数组？" class="headerlink" title=" 如何权衡是使用无序的数组还是有序的数组？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=31" target="_blank" rel="noopener"> 如何权衡是使用无序的数组还是有序的数组？ </a></h3><blockquote>
<p>有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。</p>
<p>有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。 </p>
</blockquote>
<h3 id="Java集合类框架的最佳实践有哪些？"><a href="#Java集合类框架的最佳实践有哪些？" class="headerlink" title=" Java集合类框架的最佳实践有哪些？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=32" target="_blank" rel="noopener"> Java集合类框架的最佳实践有哪些？ </a></h3><blockquote>
<p>根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的数量是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。</p>
<p>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。</p>
<p>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。</p>
<p>使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。</p>
<p>编程的时候接口优于实现。</p>
<p>底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。 </p>
</blockquote>
<h3 id="Enumeration接口和Iterator接口的区别有哪些？"><a href="#Enumeration接口和Iterator接口的区别有哪些？" class="headerlink" title=" Enumeration接口和Iterator接口的区别有哪些？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=33" target="_blank" rel="noopener"> Enumeration接口和Iterator接口的区别有哪些？ </a></h3><blockquote>
<p>Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象（即Iterator为fail-fast）。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。 </p>
</blockquote>
<h3 id="HashSet和TreeSet有什么区别？"><a href="#HashSet和TreeSet有什么区别？" class="headerlink" title=" HashSet和TreeSet有什么区别？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=34" target="_blank" rel="noopener"> HashSet和TreeSet有什么区别？ </a></h3><blockquote>
<p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。</p>
<p>另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的（如果需要在Treeset中插入对对象，需要实现Comparable接口或传入Comparator，为其指定比较策略）。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。</p>
</blockquote>
<h3 id="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"><a href="#Java中垃圾回收有什么目的？什么时候进行垃圾回收？" class="headerlink" title="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=35" target="_blank" rel="noopener">Java中垃圾回收有什么目的？什么时候进行垃圾回收？</a></h3><blockquote>
<p>垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行。</p>
<p>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。</p>
<p>回收时间：即触发GC的时间，在新生代的Eden区满了，会触发新生代GC（Mimor    GC），经过多次触发新生代GC存活下来的对象就会升级到老年代，升级到老年代的对象所需的内存大于老年代剩余的内存，则会触发老年代GC（Full    GC）。当程序调用System.gc()时也会触发Full GC。</p>
</blockquote>
<h3 id="System-gc-和Runtime-getRuntime-gc-会做什么事情？"><a href="#System-gc-和Runtime-getRuntime-gc-会做什么事情？" class="headerlink" title="System.gc()和Runtime.getRuntime().gc();会做什么事情？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=36" target="_blank" rel="noopener">System.gc()和Runtime.getRuntime().gc();会做什么事情？</a></h3><blockquote>
<p>这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。</p>
</blockquote>
<h3 id="finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？"><a href="#finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？" class="headerlink" title="finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=37" target="_blank" rel="noopener">finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？</a></h3><blockquote>
<p>垃圾回收器(garbage collector)决定回收某对象时，就会运行该对象的finalize()方法 但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说finalize()可能永远不被执行，显然指望它做收尾工作是靠不住的。 那么finalize()究竟是做什么的呢？它最主要的用途是回收特殊渠道申请的内存。Java程序有垃圾回收器，所以一般情况下内存问题不用程序员操心。但有一种JNI(Java Native Interface)调用non-Java程序（C或C++），finalize()的工作就是回收这部分的内存。 </p>
</blockquote>
<h3 id="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"><a href="#如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？" class="headerlink" title="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=38" target="_blank" rel="noopener">如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</a></h3><blockquote>
<p>不会，在下一个垃圾回收周期中，这个对象将是可被回收的。</p>
</blockquote>
<h3 id="Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space"><a href="#Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space" class="headerlink" title=" Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)? "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=39" target="_blank" rel="noopener"> Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)? </a></h3><blockquote>
<p>JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。</p>
<p>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。  </p>
<p>永久代是用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate  等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类，永久代中一般包含： </p>
<ul>
<li>类的方法(字节码…)  </li>
<li>类名(Sring对象)  </li>
<li>.class文件读到的常量信息  </li>
<li>class对象相关的对象列表和类型列表 (e.g., 方法对象的array).  </li>
<li>JVM创建的内部对象  </li>
<li>JIT编译器优化用的信息 </li>
</ul>
</blockquote>
<h3 id="串行-serial-收集器和吞吐量-throughput-收集器的区别是什么？"><a href="#串行-serial-收集器和吞吐量-throughput-收集器的区别是什么？" class="headerlink" title=" 串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=40" target="_blank" rel="noopener"> 串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？ </a></h3><blockquote>
<p>吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。 </p>
<p>链接：<a href="https://www.nowcoder.com/questionTerminal/46b6030921164ab0a3cb3dbd6d64f01a来源：牛客网" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/46b6030921164ab0a3cb3dbd6d64f01a来源：牛客网</a></p>
<h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><ul>
<li>Serial 收集器是历史悠久，最基本的收集器。它是一个单线程的收集器（说明：这里的单线程不仅仅是指收集器工作时使用一个CPU或者一条收集线程去收集，并且Serial工作时，必须暂停其他所有的工作线程，也就是“stop the world”，直到垃圾收集完成。）Serial是JVM运行在Client模式默认的新生代收集器。</li>
</ul>
<h3 id="throughput收集器"><a href="#throughput收集器" class="headerlink" title="throughput收集器"></a>throughput收集器</h3><ul>
<li>也叫做Parallel Scavenge 收集器，它的目标是达到一个可控制的吞吐量(throughput)，（说明：吞吐量就是CPU用于执行代码的时间和CPU总共消耗时间的比值，即：吞吐量 = 运行代码时间 / (运行代码时间 + 垃圾收集器工作时间)），JVM提供了两个参数以精确的控制吞吐量，-XX:MaxGCPauseMillis 最大收集停顿时间；-XX:GCTimeRatio 垃圾收集时间占总时间的比例。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>了解了他们各自的特性，那么他们之间的不同点就显而易见了，Serial收集器工作时 “stop the world”,简单而高效。而throughput收集器更关注总体的吞吐量，收集效果和性能总是密切关联的。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(3)</title>
    <url>/2020/01/03/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(3)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（三），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集”的21-30题。</li>
</ul>
<a id="more"></a>

<h3 id="Iterator和ListIterator的区别是什么？"><a href="#Iterator和ListIterator的区别是什么？" class="headerlink" title="Iterator和ListIterator的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=21" target="_blank" rel="noopener">Iterator和ListIterator的区别是什么？</a></h3><blockquote>
<p> 下面列出了他们的区别：</p>
<ul>
<li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</li>
<li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</li>
<li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。 </li>
</ul>
</blockquote>
<h3 id="快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=22" target="_blank" rel="noopener">快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</a></h3><blockquote>
<p>一：快速失败（fail—fast）</p>
<ul>
<li><p>在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的结构进行了修改（增加、删除），则会抛出Concurrent Modification Exception。</p>
</li>
<li><p>原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果结构发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p>
</li>
<li><p>注意：这里异常的抛出条件是检测到 modCount！=expectedmodCount 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。</p>
</li>
<li><p>场景：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。</p>
</li>
</ul>
<p>二：安全失败（fail—safe）</p>
<ul>
<li><p>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p>
</li>
<li><p>原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。</p>
</li>
<li><p>缺点：基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p>
</li>
<li><p>场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p>
</li>
</ul>
</blockquote>
<h3 id="Java中的HashMap的工作原理是什么？"><a href="#Java中的HashMap的工作原理是什么？" class="headerlink" title="Java中的HashMap的工作原理是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=23" target="_blank" rel="noopener">Java中的HashMap的工作原理是什么？</a></h3><blockquote>
<p> Java中的HashMap是以键值对(key-value)的形式存储元素的。</p>
<p>HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。</p>
<p>HashMap的一些重要的特性是它的容量(capacity 默认16)，负载因子(load factor 默认0.75)和扩容极限(threshold resizing)。 </p>
</blockquote>
<h3 id="hashCode-和equals-方法的重要性体现在什么地方？"><a href="#hashCode-和equals-方法的重要性体现在什么地方？" class="headerlink" title="hashCode()和equals()方法的重要性体现在什么地方？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=24" target="_blank" rel="noopener">hashCode()和equals()方法的重要性体现在什么地方？</a></h3><blockquote>
<p> Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。 </p>
</blockquote>
<h3 id="HashMap和Hashtable有什么区别？"><a href="#HashMap和Hashtable有什么区别？" class="headerlink" title="HashMap和Hashtable有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=25" target="_blank" rel="noopener">HashMap和Hashtable有什么区别？</a></h3><blockquote>
<p>HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：</p>
<ul>
<li>HashMap允许键和值是null，而Hashtable不允许键或者值是null。</li>
<li>Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。</li>
<li>HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。</li>
<li>一般认为Hashtable是一个遗留的类。 </li>
</ul>
</blockquote>
<h3 id="数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=26" target="_blank" rel="noopener">数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</a></h3><blockquote>
<p>下面列出了Array和ArrayList的不同点：</p>
<ul>
<li>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。</li>
<li>Array大小是固定的，ArrayList的大小是动态变化的。</li>
<li>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</li>
<li>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。 </li>
</ul>
</blockquote>
<h3 id="ArrayList和LinkedList有什么区别？"><a href="#ArrayList和LinkedList有什么区别？" class="headerlink" title="ArrayList和LinkedList有什么区别？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=27" target="_blank" rel="noopener">ArrayList和LinkedList有什么区别？</a></h3><blockquote>
<p>ArrayList和LinkedList都实现了List接口，他们有以下的不同点：</p>
<ul>
<li>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</li>
<li>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</li>
<li>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</li>
<li>也可以参考ArrayList vs. LinkedList。 </li>
</ul>
</blockquote>
<h3 id="Comparable和Comparator接口是干什么的？列出它们的区别。"><a href="#Comparable和Comparator接口是干什么的？列出它们的区别。" class="headerlink" title="Comparable和Comparator接口是干什么的？列出它们的区别。"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=28" target="_blank" rel="noopener">Comparable和Comparator接口是干什么的？列出它们的区别。</a></h3><blockquote>
<p>Java提供了只包含一个compareTo()方法的Comparable接口。</p>
<ul>
<li>这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明已经存在的对象小于，等于，大于输入对象。</li>
</ul>
<p>Java提供了包含compare()和equals()两个方法的Comparator接口。</p>
<ul>
<li>compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。</li>
<li>equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。 </li>
</ul>
</blockquote>
<h3 id="什么是Java优先级队列-Priority-Queue-？"><a href="#什么是Java优先级队列-Priority-Queue-？" class="headerlink" title="什么是Java优先级队列(Priority Queue)？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=29" target="_blank" rel="noopener">什么是Java优先级队列(Priority Queue)？</a></h3><blockquote>
<p>PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。</p>
</blockquote>
<h3 id="你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？"><a href="#你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？" class="headerlink" title="你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=30" target="_blank" rel="noopener">你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？</a></h3><blockquote>
<p>大O符号描述了当数据结构里面的元素增加的时候，算法的规模或者是一个渐进上界 。<br>大O符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大O符号基于时间，内存和性能来选择最好的实现。大O符号可以对大量数据的性能给出一个很好的说明。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(2)</title>
    <url>/2020/01/02/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(2)/</url>
    <content><![CDATA[<ul>
<li><p>Java校招面试题目合集（二），随着做题复习各方面基础内容，提高自己从每一天做起！！！</p>
</li>
<li><p>题目来源于“牛客网”的“Java校招面试题目合集”的11-20题。</p>
</li>
</ul>
<a id="more"></a>

<h3 id="进程和线程的区别是什么？"><a href="#进程和线程的区别是什么？" class="headerlink" title="进程和线程的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21069&query=&asc=true&order=&page=11" target="_blank" rel="noopener">进程和线程的区别是什么？</a></h3><blockquote>
<p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。</p>
<p><strong>线程与进程的区别归纳：</strong></p>
<p><strong>a.地址空间和其它资源</strong>：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。</p>
<p><strong>b.通信：</strong>进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。</p>
<p><strong>c.调度和切换</strong>：线程上下文切换比进程上下文切换要快得多。</p>
<p>d.在多线程OS中，进程不是一个可执行的实体。</p>
</blockquote>
<h3 id="创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=12" target="_blank" rel="noopener">创建线程有几种不同的方式？你喜欢哪一种？为什么？</a></h3><blockquote>
<p>有4种方式可以用来创建线程：</p>
<ul>
<li><p>继承Thread类</p>
</li>
<li><p>实现Runnable接口</p>
</li>
<li><p>应用程序可以使用Executor框架来创建线程池</p>
</li>
</ul>
<p>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。 </p>
<ul>
<li>还有一种方式是实现Callable接口</li>
</ul>
</blockquote>
<h3 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=13" target="_blank" rel="noopener">概括的解释下线程的几种可用状态。</a></h3><blockquote>
<ol>
<li><p>新建( new )：新创建了一个线程对象。</p>
</li>
<li><p>可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。</p>
</li>
<li><p>运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。</p>
</li>
<li><p>阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：<br>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。<br>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。<br>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。</p>
</li>
<li><p>死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>
<p><img src="http://black-dong.oss-cn-beijing.aliyuncs.com/blog/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(2)_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="Java校招题(2)_线程状态图"></p>
</li>
</ol>
</blockquote>
<h3 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=14" target="_blank" rel="noopener">同步方法和同步代码块的区别是什么？</a></h3><blockquote>
<p>区别：</p>
<ul>
<li><p>同步方法默认用this或者当前类class对象作为锁；</p>
</li>
<li><p>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</p>
</li>
<li><p>同步方法使用关键字 synchronized修饰方法，而同步代码块主要是修饰需要进行同步的代码，用  synchronized（object）{代码内容}进行修饰；</p>
</li>
</ul>
</blockquote>
<h3 id="在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？"><a href="#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？" class="headerlink" title="在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=15" target="_blank" rel="noopener">在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</a></h3><blockquote>
<p> 监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。 </p>
</blockquote>
<h3 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title=" 什么是死锁(deadlock)？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=16" target="_blank" rel="noopener"> 什么是死锁(deadlock)？ </a></h3><blockquote>
<p>所谓死锁是指多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。死锁产生的4个必要条件：</p>
<ul>
<li>互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</li>
<li>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放（只能是主动释放)。</li>
<li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</li>
<li>循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。</li>
</ul>
</blockquote>
<h3 id="如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="如何确保N个线程可以访问N个资源同时又不导致死锁？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=17" target="_blank" rel="noopener">如何确保N个线程可以访问N个资源同时又不导致死锁？</a></h3><blockquote>
<p>使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。 </p>
</blockquote>
<h3 id="Java集合类框架的基本接口有哪些？"><a href="#Java集合类框架的基本接口有哪些？" class="headerlink" title="Java集合类框架的基本接口有哪些？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=18" target="_blank" rel="noopener">Java集合类框架的基本接口有哪些？</a></h3><blockquote>
<p> 集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。<br>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：</p>
<ul>
<li>Collection：代表一组对象，每一个对象都是它的子元素。</li>
<li>Set：不包含重复元素的Collection。</li>
<li>List：有顺序的collection，并且可以包含重复元素。</li>
<li>Map：可以把键(key)映射到值(value)的对象，键不能重复。 </li>
</ul>
</blockquote>
<h3 id="为什么集合类没有实现Cloneable和Serializable接口？"><a href="#为什么集合类没有实现Cloneable和Serializable接口？" class="headerlink" title="为什么集合类没有实现Cloneable和Serializable接口？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=19" target="_blank" rel="noopener">为什么集合类没有实现Cloneable和Serializable接口？</a></h3><blockquote>
<p>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。</p>
</blockquote>
<h3 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器(Iterator)？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=20" target="_blank" rel="noopener">什么是迭代器(Iterator)？</a></h3><blockquote>
<p>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的remove(Object Obj)删除，可以通过迭代器的remove()方法删除。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(1)</title>
    <url>/2020/01/01/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(1)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（一），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源于“牛客网”的“Java校招面试题目合集”的1-10题。</li>
</ul>
<a id="more"></a>

<h3 id="什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？"><a href="#什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？" class="headerlink" title="什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21069&query=&asc=true&order=&page=1" target="_blank" rel="noopener">什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？</a></h3><blockquote>
<p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。</p>
<p>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p>
</blockquote>
<h3 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=2" target="_blank" rel="noopener">JDK和JRE的区别是什么？</a></h3><blockquote>
<p>Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。</p>
<p>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p>
</blockquote>
<h3 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title=" ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=3" target="_blank" rel="noopener"> ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ </a></h3><blockquote>
<p>“static” 关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。</p>
<p>java 中也不可以覆盖 private 的方法，因为 private 修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到 private 变量或方法的，当然也不能覆盖。</p>
</blockquote>
<h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title=" 是否可以在static环境中访问非static变量？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=4" target="_blank" rel="noopener"> 是否可以在static环境中访问非static变量？ </a></h3><blockquote>
<p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>
</blockquote>
<h3 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=5" target="_blank" rel="noopener">Java支持的数据类型有哪些？什么是自动拆装箱？</a></h3><blockquote>
<p>Java语言支持的8种基本数据类型是：</p>
<p>byte、short、int、long、float、double、boolean、char</p>
<p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。 </p>
<p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char，short， boolean，int ，long，float，double；另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程</p>
</blockquote>
<h3 id="Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？"><a href="#Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？" class="headerlink" title="Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=6" target="_blank" rel="noopener">Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？</a></h3><blockquote>
<p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p>
</blockquote>
<h3 id="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"><a href="#Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？" class="headerlink" title="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=7" target="_blank" rel="noopener">Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？</a></h3><blockquote>
<p> 当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。<br>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。 </p>
</blockquote>
<h3 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=8" target="_blank" rel="noopener">Java支持多继承么？</a></h3><blockquote>
<p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p>
</blockquote>
<h3 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=9" target="_blank" rel="noopener">接口和抽象类的区别是什么？</a></h3><blockquote>
<p> Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：</p>
<blockquote>
<p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。<br>类可以实现很多个接口，但是只能继承一个抽象类<br>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。<br>抽象类可以在不提供接口方法实现的情况下实现接口。<br>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。<br>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。<br>接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。</p>
</blockquote>
<p>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。<br> 也可以参考JDK8中抽象类和接口的区别 </p>
</blockquote>
<h3 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=10" target="_blank" rel="noopener">什么是值传递和引用传递？</a></h3><blockquote>
<p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.</p>
<p>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。</p>
<p>一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
