<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java校招题(2)</title>
    <url>/2020/01/02/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(2)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（二），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集”的11-20题。</li>
</ul>
<a id="more"></a>

<h3 id="进程和线程的区别是什么？"><a href="#进程和线程的区别是什么？" class="headerlink" title="进程和线程的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21069&query=&asc=true&order=&page=11" target="_blank" rel="noopener">进程和线程的区别是什么？</a></h3><blockquote>
<p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。</p>
<p><strong>线程与进程的区别归纳：</strong></p>
<p><strong>a.地址空间和其它资源</strong>：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。</p>
<p><strong>b.通信：</strong>进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。</p>
<p><strong>c.调度和切换</strong>：线程上下文切换比进程上下文切换要快得多。</p>
<p>d.在多线程OS中，进程不是一个可执行的实体。</p>
</blockquote>
<h3 id="创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=12" target="_blank" rel="noopener">创建线程有几种不同的方式？你喜欢哪一种？为什么？</a></h3><blockquote>
<p>有4种方式可以用来创建线程：</p>
<ul>
<li><p>继承Thread类</p>
</li>
<li><p>实现Runnable接口</p>
</li>
<li><p>应用程序可以使用Executor框架来创建线程池</p>
</li>
</ul>
<p>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。 </p>
<ul>
<li>还有一种方式是实现Callable接口</li>
</ul>
</blockquote>
<h3 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a><a href="https://www.nowcoder.com/ta/review-java/review?page=13" target="_blank" rel="noopener">概括的解释下线程的几种可用状态。</a></h3><blockquote>
<ol>
<li><p>新建( new )：新创建了一个线程对象。</p>
</li>
<li><p>可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。</p>
</li>
<li><p>运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。</p>
</li>
<li><p>阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：<br>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。<br>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。<br>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。</p>
</li>
<li><p>死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>
<p><img src="http://black-dong.oss-cn-beijing.aliyuncs.com/blog/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(2)_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="Java校招题(2)_线程状态图"></p>
</li>
</ol>
</blockquote>
<h3 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=14" target="_blank" rel="noopener">同步方法和同步代码块的区别是什么？</a></h3><blockquote>
<p>区别：</p>
<ul>
<li><p>同步方法默认用this或者当前类class对象作为锁；</p>
</li>
<li><p>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</p>
</li>
<li><p>同步方法使用关键字 synchronized修饰方法，而同步代码块主要是修饰需要进行同步的代码，用  synchronized（object）{代码内容}进行修饰；</p>
</li>
</ul>
</blockquote>
<h3 id="在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？"><a href="#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？" class="headerlink" title="在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=15" target="_blank" rel="noopener">在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</a></h3><blockquote>
<p> 监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。 </p>
</blockquote>
<h3 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title=" 什么是死锁(deadlock)？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=16" target="_blank" rel="noopener"> 什么是死锁(deadlock)？ </a></h3><blockquote>
<p>所谓死锁是指多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。死锁产生的4个必要条件：</p>
<ul>
<li>互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</li>
<li>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放（只能是主动释放)。</li>
<li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</li>
<li>循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。</li>
</ul>
</blockquote>
<h3 id="如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="如何确保N个线程可以访问N个资源同时又不导致死锁？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=17" target="_blank" rel="noopener">如何确保N个线程可以访问N个资源同时又不导致死锁？</a></h3><blockquote>
<p>使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。 </p>
</blockquote>
<h3 id="Java集合类框架的基本接口有哪些？"><a href="#Java集合类框架的基本接口有哪些？" class="headerlink" title="Java集合类框架的基本接口有哪些？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=18" target="_blank" rel="noopener">Java集合类框架的基本接口有哪些？</a></h3><blockquote>
<p> 集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。<br>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：</p>
<ul>
<li>Collection：代表一组对象，每一个对象都是它的子元素。</li>
<li>Set：不包含重复元素的Collection。</li>
<li>List：有顺序的collection，并且可以包含重复元素。</li>
<li>Map：可以把键(key)映射到值(value)的对象，键不能重复。 </li>
</ul>
</blockquote>
<h3 id="为什么集合类没有实现Cloneable和Serializable接口？"><a href="#为什么集合类没有实现Cloneable和Serializable接口？" class="headerlink" title="为什么集合类没有实现Cloneable和Serializable接口？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=19" target="_blank" rel="noopener">为什么集合类没有实现Cloneable和Serializable接口？</a></h3><blockquote>
<p>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。</p>
</blockquote>
<h3 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器(Iterator)？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=20" target="_blank" rel="noopener">什么是迭代器(Iterator)？</a></h3><blockquote>
<p>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的remove(Object Obj)删除，可以通过迭代器的remove()方法删除。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java校招题(1)</title>
    <url>/2020/01/01/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(1)/</url>
    <content><![CDATA[<ul>
<li>Java校招面试题目合集（一），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li>
<li>题目来源与“牛客网”的“Java校招面试题目合集”的1-10题。</li>
</ul>
<a id="more"></a>

<h3 id="什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？"><a href="#什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？" class="headerlink" title="什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21069&query=&asc=true&order=&page=1" target="_blank" rel="noopener">什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？</a></h3><blockquote>
<p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。</p>
<p>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p>
</blockquote>
<h3 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=2" target="_blank" rel="noopener">JDK和JRE的区别是什么？</a></h3><blockquote>
<p>Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。</p>
<p>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p>
</blockquote>
<h3 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title=" ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=3" target="_blank" rel="noopener"> ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ </a></h3><blockquote>
<p>“static” 关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。</p>
<p>java 中也不可以覆盖 private 的方法，因为 private 修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到 private 变量或方法的，当然也不能覆盖。</p>
</blockquote>
<h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title=" 是否可以在static环境中访问非static变量？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=4" target="_blank" rel="noopener"> 是否可以在static环境中访问非static变量？ </a></h3><blockquote>
<p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>
</blockquote>
<h3 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=5" target="_blank" rel="noopener">Java支持的数据类型有哪些？什么是自动拆装箱？</a></h3><blockquote>
<p>Java语言支持的8种基本数据类型是：</p>
<p>byte、short、int、long、float、double、boolean、char</p>
<p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。 </p>
<p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char，short， boolean，int ，long，float，double；另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程</p>
</blockquote>
<h3 id="Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？"><a href="#Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？" class="headerlink" title="Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=6" target="_blank" rel="noopener">Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？</a></h3><blockquote>
<p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p>
</blockquote>
<h3 id="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"><a href="#Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？" class="headerlink" title="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=7" target="_blank" rel="noopener">Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？</a></h3><blockquote>
<p> 当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。<br>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。 </p>
</blockquote>
<h3 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=8" target="_blank" rel="noopener">Java支持多继承么？</a></h3><blockquote>
<p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p>
</blockquote>
<h3 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=9" target="_blank" rel="noopener">接口和抽象类的区别是什么？</a></h3><blockquote>
<p> Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：</p>
<blockquote>
<p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。<br>类可以实现很多个接口，但是只能继承一个抽象类<br>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。<br>抽象类可以在不提供接口方法实现的情况下实现接口。<br>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。<br>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。<br>接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。</p>
</blockquote>
<p>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。<br> 也可以参考JDK8中抽象类和接口的区别 </p>
</blockquote>
<h3 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=10" target="_blank" rel="noopener">什么是值传递和引用传递？</a></h3><blockquote>
<p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.</p>
<p>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。</p>
<p>一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
