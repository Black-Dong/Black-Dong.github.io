<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Black-Dong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-01T04:46:54.797Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Black-Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java校招题(一)</title>
    <link href="http://yoursite.com/2020/01/01/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(%E4%B8%80)/"/>
    <id>http://yoursite.com/2020/01/01/Java%E6%A0%A1%E6%8B%9B%E9%A2%98(%E4%B8%80)/</id>
    <published>2020-01-01T02:45:40.000Z</published>
    <updated>2020-01-01T04:46:54.797Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java校招面试题目合集（一），随着做题复习各方面基础内容，提高自己从每一天做起！！！</li><li>题目来源与“牛客网”的“Java校招面试题目合集”的1-10题。</li></ul><a id="more"></a><h5 id="什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？"><a href="#什么是-Java-虚拟机？为什么-Java-被称为是”-平台无关的变成语言-“？" class="headerlink" title="什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？"></a><a href="https://www.nowcoder.com/ta/review-java/review?tpId=31&tqId=21069&query=&asc=true&order=&page=1" target="_blank" rel="noopener">什么是 Java 虚拟机？为什么 Java 被称为是” 平台无关的变成语言 “？</a></h5><blockquote><p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。</p><p>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p></blockquote><h5 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=2" target="_blank" rel="noopener">JDK和JRE的区别是什么？</a></h5><blockquote><p>Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。</p><p>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p></blockquote><h5 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title=" ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=3" target="_blank" rel="noopener"> ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？ </a></h5><blockquote><p>“static” 关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。</p><p>java 中也不可以覆盖 private 的方法，因为 private 修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到 private 变量或方法的，当然也不能覆盖。</p></blockquote><h5 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title=" 是否可以在static环境中访问非static变量？ "></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=4" target="_blank" rel="noopener"> 是否可以在static环境中访问非static变量？ </a></h5><blockquote><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p></blockquote><h5 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=5" target="_blank" rel="noopener">Java支持的数据类型有哪些？什么是自动拆装箱？</a></h5><blockquote><p>Java语言支持的8种基本数据类型是：</p><p>byte、short、int、long、float、double、boolean、char</p><p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。 </p><p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char，short， boolean，int ，long，float，double；另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程</p></blockquote><h5 id="Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？"><a href="#Java中的方法覆盖-Overriding-和方法重载-Overload-是什么意思？" class="headerlink" title="Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=6" target="_blank" rel="noopener">Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？</a></h5><blockquote><p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p></blockquote><h5 id="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"><a href="#Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？" class="headerlink" title="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=7" target="_blank" rel="noopener">Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？</a></h5><blockquote><p> 当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。<br>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。 </p></blockquote><h5 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=8" target="_blank" rel="noopener">Java支持多继承么？</a></h5><blockquote><p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p></blockquote><h5 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=9" target="_blank" rel="noopener">接口和抽象类的区别是什么？</a></h5><blockquote><p> Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：</p><blockquote><p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。<br>类可以实现很多个接口，但是只能继承一个抽象类<br>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。<br>抽象类可以在不提供接口方法实现的情况下实现接口。<br>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。<br>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。<br>接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。</p></blockquote><p>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。<br> 也可以参考JDK8中抽象类和接口的区别 </p></blockquote><h5 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a><a href="https://www.nowcoder.com/ta/review-java/review?query=&asc=true&order=&page=10" target="_blank" rel="noopener">什么是值传递和引用传递？</a></h5><blockquote><p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.</p><p>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。</p><p>一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Java校招面试题目合集（一），随着做题复习各方面基础内容，提高自己从每一天做起！！！&lt;/li&gt;
&lt;li&gt;题目来源与“牛客网”的“Java校招面试题目合集”的1-10题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/31/hello-world/"/>
    <id>http://yoursite.com/2019/12/31/hello-world/</id>
    <published>2019-12-31T05:22:51.565Z</published>
    <updated>2020-01-01T02:52:45.084Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
